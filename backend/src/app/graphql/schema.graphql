### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AirDropToken {
  User: User
  chainId: String
  chainName: String
  coinName: String
  coinSymbol: String
  id: Int!
  maxNumber: Int
  requirementType: RequirementType
  status: String
  type: Type
  userId: Int!
}

type DropDetails {
  description: String
  drop: AirDropToken
  dropId: Int
  id: Int
  logo: String
  socials: [String]
  steps: String
  website: String
}

type DropParticipants {
  dropId: Int
  id: Int
  participants: [String]
}

type Mutation {
  enterDrop(dropId: Int, password: String, wallet: String): DropParticipants!
  enterDropDetails(description: String, dropId: Int, logo: String, socials: [String], steps: String, website: String): DropDetails!
  updateDropDetails(description: String, dropId: Int, logo: String, socials: [String], steps: String, website: String): DropDetails!
}

type PasswordProtected {
  airDrop: AirDropToken
  dropId: Int
  id: Int
  passwords: [String]
}

type Query {
  getAirDrop(id: Int!): AirDropToken
  getDropDetails(id: Int!): DropDetails
  getDropParticipants(id: Int!, wallet: String!): [DropParticipants]
  getDrops: [AirDropToken]
  getMyDrops(id: Int!, wallet: String!): [AirDropToken]
  getPasswords(dropId: Int, wallet: String): [String]
  getTokensByChain(chainId: String!): [AirDropToken]
  getUser(id: Int!): User
  users: [User]
}

enum RequirementType {
  NFT_REQUIRED
  PASSWORD
  TOKEN_REQUIRED
}

enum Role {
  CREATOR
  USER
}

enum Type {
  LOTTERY
  TOKEN_LIMITED
  USER_LIMITED
}

type User {
  id: Int!
  role: Role
  wallet: String
}